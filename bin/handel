#!/usr/bin/env node

const minimist = require('minimist');
const fs = require('fs');
const yaml = require('js-yaml');
const cli = require('../lib/cli');

function printAndExit(msg) {
    console.log(msg)
    process.exit(1);
}

function printGeneralUsage() {
    let usageMsg = `Usage: handel <action> <args>

Action:
check -- Checks the contents of your Handel file for errors.
deploy -- Deploys the given environments from your Handel file to your AWS account.
delete -- Deletes the given environments from your Handel file out of your AWS account.

Each phase has its own unique set of arguments it requires`;
    printAndExit(usageMsg);
}

function printDeployUsage(errors) {
    let usageMsg = `Usage: handel deploy -c <accountConfig> -e <envsToDeploy> -v <deployVersion>

Options:
-c [required] -- Path to account config or base64 encoded JSON string of config
-e [required] -- A comma-separated list of environments from your handel file to deploy
-v [required] -- An arbitrary string for the version of the current deployment
-d -- If this flag is set, verbose debug output will be enabled

Errors:
  ${errors.join('\n  ')}`;
    printAndExit(usageMsg);
}

function printDeleteUsage(errors) {
    let usageMsg = `Usage: handel delete -c <accountConfig> -e <envsToDelete>

Options:
-c [required] -- Path to account config or base64 encoded JSON string of config
-e [required] -- A comma-separated list of environments from your handel file to deploy
-d -- If this flag is set, verbose debug output will be enabled
-y -- If this flag is set, you will *not* be asked to confirm the delete action

Errors:
  ${errors.join('\n  ')}`;
    printAndExit(usageMsg);
}

function loadHandelFile() {
    try {
        var handelFile = yaml.safeLoad(fs.readFileSync('./handel.yml', 'utf8'));
        return handelFile;
    }
    catch (e) {
        if (e.code === 'ENOENT') {
            printAndExit(`No 'handel.yml' file found in this directory. You must run Handel in the directory containing the Handel file.`);
        }
        else if (e.name === 'YAMLException') {
            printAndExit(`Malformed 'handel.yml' file. Make sure your Handel file is a properly formatted YAML file. You're probably missing a space or two somewhere`);
        }
        else {
            printAndExit(`Unexpected error while loading 'handel.yml' file: ${e}`);
        }
    }
}

let handelFile = loadHandelFile();
let deployPhase = process.argv[2];
let argv = minimist(process.argv.slice(2));
let errors = [];
switch (deployPhase.toLowerCase()) {
    case "deploy":
        errors = cli.validateDeployArgs(argv, handelFile);
        if (errors.length > 0) {
            printDeployUsage(errors);
        }
        else {
            cli.deployAction(handelFile, argv);
        }
        break;
    case "check":
        cli.checkAction(handelFile, argv);
        break;
    case "delete":
        errors = cli.validateDeleteArgs(argv, handelFile);
        if (errors.length > 0) {
            printDeleteUsage(errors);
        }
        else {
            cli.deleteAction(handelFile, argv);
        }
        break;
    default:
        printGeneralUsage();
}
