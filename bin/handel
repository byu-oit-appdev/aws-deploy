#!/usr/bin/env node
const handel = require('../lib/handel');
const program = require('commander'); //TODO - I don't like this CLI args library much, find another one
const fs = require('fs');
const path = require('path');
const winston = require('winston');
const util = require('../lib/util/util');
const yaml = require('js-yaml');
winston.level = 'info';


program
    .arguments('<file>')
    .option('-c, --account-config-file <configfile>', 'The account config file used by Handel')
    .option('-a --account-config <base64_config>', 'The Base 64-encoded JSON string of the YAML account config file')
    .option('-d, --handel-file <handelfile>', 'The Handel deploy specification file provided by the user')
    .option('-e, --environments-to-deploy <system>', 'A comma-delimited list of the environments from the deploy spec that you wish to deploy')
    .option('-v, --deploy-version <version>', 'The version of the current deployment')
    .parse(process.argv);


function getAbsoluteConfigFilePath(filePath) {
    var absolutePath;
    if( fs.existsSync(filePath) ) {
        absolutePath = path.resolve(filePath);
    }
    if(!absolutePath) {
        winston.error(`Invalid file path for config file: ${filePath}`);
        process.exit(1);
    }
    return absolutePath;
}

function getAccountConfigFilePath(configFilePath) {
    if (!configFilePath) {
        winston.error("Missing account-config-file parameter");
        process.exit(1);
    }
    return getAbsoluteConfigFilePath(configFilePath);
}

function getHandelFilePath(handelFilePath) {
    if (!handelFilePath) {
        winston.error("Missing handel-file parameter");
        process.exit(1);
    }
    return getAbsoluteConfigFilePath(handelFilePath);
}

function getDeployVersion(deployVersion) {
    if (!deployVersion) {
        winston.error("Missing deploy-version parameter");
        process.exit(1);
    }
    return deployVersion;
}

if(!program.environmentsToDeploy) {
    winston.error("Missing environments-to-deploy parameter");
    process.exit(1);
}

let accountConfig = null;
if(program.accountConfig) {
    accountConfig = yaml.safeLoad(new Buffer(program.accountConfig, 'base64').toString());
}
else {
    let absoluteConfigFilePath = getAccountConfigFilePath(program.accountConfigFile);
    accountConfig = util.readYamlFileSync(absoluteConfigFilePath);
}
let absoluteHandelFilePath = getHandelFilePath(program.handelFile);
let deployVersion = getDeployVersion(program.deployVersion);
handel.deploy(accountConfig, absoluteHandelFilePath, program.environmentsToDeploy.split(","), deployVersion)
    .then(envDeployResults => {
        let success = true;
        for(let envDeployResult of envDeployResults) {
            if(envDeployResult.status !== 'success') {
                winston.warn(`Error while deploying environment: ${envDeployResult.message}`);
                winston.warn(envDeployResult.error);
                success = false;
            }
        }

        if(success) {
            winston.info("Finished deploying everything successfully");
        }
        else {
            winston.warn("Finished deployment with errors");
        }
    })
    .catch(err => {
        winston.warn(err);
    })