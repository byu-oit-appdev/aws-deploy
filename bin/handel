#!/usr/bin/env node
const deleteLifecycle = require('../lib/lifecycles/delete');
const deployLifecycle = require('../lib/lifecycles/deploy');
const checkLifecycle = require('../lib/lifecycles/check');
const minimist = require('minimist');
const fs = require('fs');
const winston = require('winston');
const yaml = require('js-yaml');
const cli = require('../lib/cli');

function printAndExit(msg) {
    console.log(msg)
    process.exit(1);
}

function printGeneralUsage() {
    let usageMsg = `Usage: handel <action> <args>

Action:
Check -- Checks the contents of your Handel file for errors.
Deploy -- Deploys the given environments from your Handel file to your AWS account.
Delete -- Deletes the given environments from your Handel file out of your AWS account.

Each phase has its own unique set of arguments it requires`;
    printAndExit(usageMsg);
}

function printDeployUsage(errors) {
    let usageMsg = `Usage: handel deploy -c <accountConfig> -e <envsToDeploy> -v <deployVersion>

Options:
-c [required] -- Path to account config or base64 encoded JSON string of config
-e [required] -- A comma-separated list of environments from your handel file to deploy
-v [required] -- An abitrary string for the version of the current deployment
-d -- If this flag is set, verbose debug output will be enabled

Errors: 
  ${errors.join('\n  ')}`;
    printAndExit(usageMsg);
}

function printDeleteUsage(errors) {
    let usageMsg = `Usage: handel delete -c <accountConfig> -e <envsToDelete>

Options:
-c [required] -- Path to account config or base64 encoded JSON string of config
-e [required] -- A comma-separated list of environments from your handel file to deploy
-d -- If this flag is set, verbose debug output will be enabled

Errors: 
  ${errors.join('\n  ')}`;
    printAndExit(usageMsg);
}

function setLogLevel(argv) {
    if (argv.d) {
        winston.level = 'debug';
    }
    else {
        winston.level = 'info';
    }
}

function deployAction(handelFile, argv) {
    setLogLevel(argv);
    let accountConfig = cli.loadAccountConfig(argv.c);
    let deployVersion = argv.v;
    let environmentsToDeploy = argv.e.split(',');
    deployLifecycle.deploy(accountConfig, handelFile, environmentsToDeploy, deployVersion)
        .then(envDeployResults => {
            let success = true;
            for (let envDeployResult of envDeployResults) {
                if (envDeployResult.status !== 'success') {
                    winston.warn(`Error while deploying environment: ${envDeployResult.message}`);
                    if(winston.level === 'debug') {
                        winston.warn(envDeployResult.error);
                    }
                    success = false;
                }
            }

            if (success) {
                winston.info("Finished deploying everything successfully");
            }
            else {
                winston.warn("Finished deployment with errors");
                process.exit(1);
            }
        })
        .catch(err => {
            winston.warn(err);
            process.exit(1);
        })
}

function checkAction(handelFile) {
    let errors = checkLifecycle.check(handelFile);
    let foundErrors = false;
    for (let env in errors) {
        let envErrors = errors[env];
        if (envErrors.length > 0) {
            winston.error(`The following errors were found for env ${env}`);
            console.log("  " + envErrors.join("\n  "));
            foundErrors = true;
        }
    }

    if(!foundErrors) {
        winston.info("No errors were found when checking Handel file");
    }
}

function deleteAction(handelFile, argv) {
    setLogLevel(argv);
    let accountConfig = cli.loadAccountConfig(argv.c);
    let environmentToDelete = argv.e;
    cli.confirmDelete(environmentToDelete, argv.d)
        .then(confirmDelete => {
            if (confirmDelete) {
                deleteLifecycle.delete(accountConfig, handelFile, environmentToDelete)
                    .then(envDeleteResult => {
                        if (envDeleteResult.status !== 'success') {
                            winston.warn(`Error while deleting environment: ${envDeleteResult.message}`);
                            winston.warn(envDeleteResult.error);
                            winston.warn("Finished deletion with errors");
                            process.exit(1);
                        }
                        else {
                            winston.info("Finished deleting everything successfully");
                        }
                    })
                    .catch(err => {
                        winston.warn(err);
                        process.exit(1);
                    })
            }
            else {
                winston.info("You did not type 'yes' to confirm deletion. Will not delete environment.");
            }
        });
}

function loadHandelFile() {
    try {
        var handelFile = yaml.safeLoad(fs.readFileSync('./handel.yml', 'utf8'));
        return handelFile;
    }
    catch (e) {
        if (e.code === 'ENOENT') {
            printAndExit(`No 'handel.yml' file found in this directory. You must run Handel in the directory containing the Handel file.`);
        }
        else if (e.name === 'YAMLException') {
            printAndExit(`Malformed 'handel.yml' file. Make sure your Handel file is a properly formatted YAML file. You're probably missing a space or two somewhere`);
        }
        else {
            printAndExit(`Unexpected error while loading 'handel.yml' file: ${e}`);
        }
    }
}

let handelFile = loadHandelFile();
let deployPhase = process.argv[2];
let argv = minimist(process.argv.slice(2));
let errors = [];
switch (deployPhase) {
    case "deploy":
        errors = cli.validateDeployArgs(argv, handelFile);
        if (errors.length > 0) {
            printDeployUsage(errors);
        }
        else {
            deployAction(handelFile, argv);
        }
        break;
    case "check":
        checkAction(handelFile);
        break;
    case "delete":
        errors = cli.validateDeleteArgs(argv, handelFile);
        if (errors.length > 0) {
            printDeleteUsage(errors);
        }
        else {
            deleteAction(handelFile, argv);
        }
        break;
    default:
        printGeneralUsage();
}
