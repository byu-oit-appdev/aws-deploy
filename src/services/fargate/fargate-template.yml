---
AWSTemplateFormatVersion: '2010-09-09'
Description: Handel-created Fargate App

Resources:
  #
  # Configure IAM resources for Fargate resources
  #
  TaskRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: {{stackName}}
      Path: "/services/"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
              - "ecs-tasks.amazonaws.com"
            Action:
            - "sts:AssumeRole"
  TaskRolePolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: {{stackName}}
      Roles:
      - !Ref TaskRole
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
        {{#each policyStatements}}
        - Effect: {{Effect}}
          Action:
          {{#each Action}}
          - '{{{this}}}'
          {{/each}}
          Resource:
          {{#each Resource}}
          - '{{{this}}}'
          {{/each}}
        {{/each}}
  EcsIamRole: # TODO is this needed for fargate?
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
          Action:
          - sts:AssumeRole
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role

  #
  # Configure ECS Cluster
  #
  {{#if clusterName}}
  EcsCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: {{clusterName}}
  {{/if}}

  #
  # Configure ECS Service that runs on the cluster
  #
  EcsService:
    Type: AWS::ECS::Service
    LaunchType: FARGATE
    DependsOn:
    {{#if oneOrMoreTasksHasRouting}}
    - AlbListener
    {{/if}}
    {{#if clusterName}} # TODO can we do if clusterName != 'default'?
    - EcsCluster
    {{/if}}
    Properties:
      Cluster:
        Ref: EcsCluster
      DeploymentConfiguration:
        MaximumPercent: 200  #TODO - Does this need to be dynamically configured, or is just a blanket 200 ok?
        MinimumHealthyPercent: {{minimumHealthyPercentDeployment}}
      DesiredCount: {{autoScaling.minTasks}}
      {{#if oneOrMoreTasksHasRouting}}
      LoadBalancers:
      {{#each containerConfigs}}
      {{#if routingInfo}}
      - ContainerName: {{name}}
        ContainerPort: {{routingInfo.containerPort}}
        TargetGroupArn:
          Ref: AlbTargetGroup{{name}}
      {{/if}}
      {{/each}}
      Role: {{ecsServiceRoleArn}}
      {{/if}}
      TaskDefinition:
        Ref: TaskDefinition{{deploymentSuffix}}
      PlacementStrategies:
        - Type: spread
          Field: instanceId
  TaskDefinition{{deploymentSuffix}}:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Cpu: {{cpuUnits}} #TODO should we and if so how do we limit the values to just the valid ones?
      Memory: {{maxMb}} #TODO should we and if so how do we limit the values to just the valid ones?
      Family: {{clusterName}}
      TaskRoleArn: !GetAtt TaskRole.Arn
      NetworkMode: awsvpc
      {{#if volumes}}
      Volumes:
      {{#each volumes}}
      - Name: {{name}}
        Host:
          SourcePath: {{sourcePath}}
      {{/each}}
      {{/if}}
      RequiresCompatibilities:
      - FARGATE
      ContainerDefinitions:
      {{#each containerConfigs}}
      - Name: {{name}}
        Image: {{imageName}}
        Memory: {{maxMb}} #TODO what should this value be given Memory in TaskDefinition is required?
        Cpu: {{cpuUnits}} #TODO what should this value be given Cpu in TaskDefinition is required?
        Essential: true
        Privileged: false
        DisableNetworking: false
        {{#if links}}
        Links:
        {{#each links}}
        - {{this}}
        {{/each}}
        {{/if}}
        {{#if portMappings}}
        PortMappings:
        {{#each portMappings}}
        - ContainerPort: {{this}} #TODO do we need to set HostPort here to 0 for ALB dynamic port configuration?
          Protocol: tcp
        {{/each}}
        {{/if}}
        {{#if ../logging}}
        LogConfiguration:
          LogDriver: awslogs
          Options:
            awslogs-group: !Ref ContainerLogGroup
            awslogs-region: !Ref "AWS::Region"
            awslogs-stream-prefix: {{name}}
        {{/if}}
        Environment:
        {{#each environmentVariables}}
        - Name: {{@key}}
          Value: {{this}}
        {{/each}}
        {{#if mountPoints}}
        MountPoints:
        {{#each mountPoints}}
        - SourceVolume: {{sourceVolume}}
          ContainerPath: {{containerPath}}
        {{/each}}
        {{/if}}
      {{/each}}

  {{#if logging}}
  ContainerLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: fargate/{{logGroupName}}
      {{#if logRetentionInDays}}
      RetentionInDays: {{logRetentionInDays}} # possible values at http://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_PutRetentionPolicy.html
      {{/if}}
  {{/if}}

  #
  # Configure Service Auto Scaling
  #
  {{#if autoScaling.scalingEnabled}}
  ServiceAutoScalingRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: {{clusterName}}-service-autoscaling # TODO what's a better name?
      Path: /services/
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - application-autoscaling.amazonaws.com
          Action:
          - 'sts:AssumeRole'
  ServiceAutoScalingPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: {{clusterName}}-service-autoscaling # TODO better name?
      Roles:
      - !Ref ServiceAutoScalingRole
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
        - Effect: Allow
          Action:
          - 'application-autoscaling:*'
          - 'cloudwatch:DescribeAlarms'
          - 'cloudwatch:PutMetricAlarm'
          - 'ecs:DescribeServices'
          - 'ecs:UpdateService'
          Resource:
          - '*'
  ScalableTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MaxCapacity: {{autoScaling.maxTasks}}
      MinCapacity: {{autoScaling.minTasks}}
      ResourceId: !Join ["", [ "service/{{clusterName}}/", !GetAtt EcsService.Name]]
      RoleARN: !GetAtt ServiceAutoScalingRole.Arn
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs
  {{#each autoScaling.scalingPolicies}}
  ServiceScalingPolicy{{@index}}:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: {{../clusterName}}-{{@index}}
      PolicyType: StepScaling
      ScalingTargetId: !Ref ScalableTarget
      StepScalingPolicyConfiguration:
        AdjustmentType: {{adjustmentType}}
        Cooldown: {{cooldown}}
        MetricAggregationType: {{metricAggregationType}}
        StepAdjustments:
        - ScalingAdjustment: {{adjustmentValue}}
          {{#if scaleUp}}
          MetricIntervalLowerBound: 0
          {{/if}}
          {{#if scaleDown}}
          MetricIntervalUpperBound: 0
          {{/if}}
  ServiceScalingAlarm{{@index}}:
    Type: AWS::CloudWatch::Alarm
    Properties:
      ActionsEnabled: true
      AlarmActions:
      - !Ref ServiceScalingPolicy{{@index}}
      AlarmDescription: Handel-created alarm for ECS cluster '{{../clusterName}}'' application auto-scaling
      ComparisonOperator: {{comparisonOperator}}
      Dimensions:
      {{#if dimensions}}
      {{#each dimensions}}
      - Name: {{name}}
        Value: {{value}}
      {{/each}}
      {{else}}
      - Name: ClusterName
        Value: {{../clusterName}}
      - Name: ServiceName
        Value: !GetAtt EcsService.Name
      {{/if}}
      EvaluationPeriods: {{evaluationPeriods}}
      {{#if scaleDown}}
      InsufficientDataActions:
      - !Ref ServiceScalingPolicy{{@index}}
      {{/if}}
      MetricName: {{metricName}}
      Namespace: {{namespace}}
      Period: {{period}}
      Statistic: {{metricAggregationType}}
      Threshold: {{threshold}}
  {{/each}}
  {{/if}

  #
  # Configure Load Balancer if requested
  #
  {{#if oneOrMoreTasksHasRouting}}
  Alb:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    DependsOn: AlbSecurityGroup
    Properties:
      Name: {{loadBalancer.albName}}
      Scheme: internet-facing
      LoadBalancerAttributes:
      - Key: idle_timeout.timeout_seconds
        Value: 60
      Subnets:
      {{#each publicSubnetIds}}
      - {{this}}
      {{/each}}
      SecurityGroups:
      - Ref: AlbSecurityGroup
      Tags:
      {{#if tags}}
      {{#each tags}}
      - Key: {{@key}}
        Value: {{this}}
      {{/each}}
      {{/if}}
      - Key: Name
        Value: {{loadBalancer.albName}}
  AlbSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for ALB
      VpcId: {{vpcId}}
      SecurityGroupIngress:
      - IpProtocol: tcp
        {{#if loadBalancer.httpsCertificate}}
        FromPort: '443'
        ToPort: '443'
        {{else}}
        FromPort: '80'
        ToPort: '80'
        {{/if}}
        CidrIp: 0.0.0.0/0
      Tags:
      {{#if tags}}
      {{#each tags}}
      - Key: {{@key}}
        Value: {{this}}
      {{/each}}
      {{/if}}
      - Key: Name
        Value: {{loadBalancer.albName}}-alb
  EcsIngressFromAlb:
    Type: AWS::EC2::SecurityGroupIngress
    DependsOn: AlbSecurityGroup
    Properties:
      GroupId: {{ecsSecurityGroupId}}
      IpProtocol: tcp
      FromPort: '0'
      ToPort: '65535'
      SourceSecurityGroupId:
        Ref: AlbSecurityGroup
  AlbListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    DependsOn:
    {{#each containerConfigs}}
    {{#if routingInfo}}
    - AlbTargetGroup{{name}}
    {{/if}}
    {{/each}}
    - Alb
    Properties:
      DefaultActions:
      - Type: forward
        TargetGroupArn:
          Ref: AlbTargetGroup{{loadBalancer.defaultRouteContainer.name}}
      LoadBalancerArn:
        Ref: Alb
      {{#if loadBalancer.httpsCertificate}}
      Port: '443'
      Protocol: HTTPS
      Certificates:
      - CertificateArn: {{loadBalancer.httpsCertificate}}
      {{else}}
      Port: '80'
      Protocol: HTTP
      {{/if}}
  {{#each containerConfigs}}
  {{#if routingInfo}}
  AlbListenerRule{{name}}:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    DependsOn:
    - AlbListener
    - AlbTargetGroup{{name}}
    Properties:
      Actions:
      - Type: forward
        TargetGroupArn:
          Ref: AlbTargetGroup{{name}}
      Conditions:
      - Field: path-pattern
        Values:
        - "{{routingInfo.basePath}}"
      ListenerArn:
        Ref: AlbListener
      Priority: {{routingInfo.albPriority}}
  AlbTargetGroup{{name}}:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: {{routingInfo.healthCheckPath}}
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      Name: {{routingInfo.targetGroupName}}
      Port: 80
      Protocol: HTTP
      Tags:
      {{#if ../tags}}
      {{#each ../tags}}
      - Key: {{@key}}
        Value: {{this}}
      {{/each}}
      {{/if}}
      - Key: Name
        Value: {{routingInfo.targetGroupName}}
      UnhealthyThresholdCount: 2
      VpcId: {{../vpcId}}
  {{/if}}
  {{/each}}
  {{#each loadBalancer.dnsNames}}
  DnsName{{@index}}:
    Type: "AWS::Route53::RecordSetGroup"
    Properties:
      Comment: Handel-created DNS Records for {{name}}
      HostedZoneId: {{zoneId}}
      RecordSets:
        - Name: {{name}}
          Type: A
          AliasTarget:
            DNSName: !GetAtt Alb.DNSName
            HostedZoneId: !GetAtt Alb.CanonicalHostedZoneID
        - Name: {{name}}
          Type: AAAA
          AliasTarget:
            DNSName: !GetAtt Alb.DNSName
            HostedZoneId: !GetAtt Alb.CanonicalHostedZoneID
  {{/each}}
  {{/if}}
Outputs:
  EcsClusterId:
    Description: The EcsClusterId
    Value:
      Ref: EcsCluster
