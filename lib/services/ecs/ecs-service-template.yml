---
AWSTemplateFormatVersion: '2010-09-09'
Description: Handel-created ECS Cluster

Resources:
  TaskRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: {{stackName}}
      Path: "/services/"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement: 
          - Effect: "Allow"
            Principal: 
              Service: 
              - "ecs-tasks.amazonaws.com"
            Action:
            - "sts:AssumeRole"
  TaskRolePolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: {{stackName}}
      Roles:
      - !Ref TaskRole
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
        {{#each policyStatements}}
        - Effect: {{Effect}}
          Action:
          {{#each Action}}
          - '{{{this}}}'
          {{/each}}
          Resource:
          {{#each Resource}}
          - '{{{this}}}'
          {{/each}}
        {{/each}}
  EcsIamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
          Action:
          - sts:AssumeRole
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role
  EcsInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
      - Ref: EcsIamRole
  EcsLaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      AssociatePublicIpAddress: false
      BlockDeviceMappings:
      - DeviceName: "/dev/xvda"
        Ebs:
          VolumeSize: 8
          VolumeType: gp2
          DeleteOnTermination: true
      - DeviceName: "/dev/xvdcz"
        Ebs:
          VolumeSize: 22
          VolumeType: gp2
          DeleteOnTermination: true
      IamInstanceProfile:
        Ref: EcsInstanceProfile
      ImageId: {{amiImageId}}
      InstanceMonitoring: false
      InstanceType: {{instanceType}}
      SecurityGroups:
      - {{ecsSecurityGroupId}}
      UserData: {{{userData}}}
      {{#if sshKeyName}}
      KeyName: {{sshKeyName}}
      {{/if}}
  EcsAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      Cooldown: {{asgCooldown}}
      DesiredCapacity: {{minInstances}}
      HealthCheckGracePeriod: 300
      HealthCheckType: EC2
      LaunchConfigurationName:
        Ref: EcsLaunchConfiguration
      MaxSize: {{maxInstances}}
      MinSize: {{minInstances}}
      Tags:
      {{#if tags}}
      {{#each tags}}
      - Key: {{@key}}
        Value: {{this}}
        PropagateAtLaunch: true
      {{/each}}
      {{/if}}
      - Key: Name
        Value: {{clusterName}}
        PropagateAtLaunch: true
      VPCZoneIdentifier: 
      {{#each privateSubnetIds}}
      - {{this}}
      {{/each}}
  EcsAutoScalingPolicyUp:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName:
        Ref: EcsAutoScalingGroup
      ScalingAdjustment: 1
  EcsClusterMemoryHighAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmActions:
      - Ref: EcsAutoScalingPolicyUp
      MetricName: MemoryReservation
      ComparisonOperator: GreaterThanThreshold
      Statistic: Average
      AlarmDescription: ECS Cluster Memory Too High Scaling Alarm
      Period: '300'
      Dimensions:
      - Value: {{clusterName}}
        Name: ClusterName
      EvaluationPeriods: '1'
      Namespace: AWS/ECS
      Threshold: '50'
  EcsAutoScalingPolicyDown:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName:
        Ref: EcsAutoScalingGroup
      ScalingAdjustment: -1
  EcsClusterMemoryLowAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmActions:
      - Ref: EcsAutoScalingPolicyDown
      MetricName: MemoryReservation
      ComparisonOperator: LessThanThreshold
      Statistic: Average
      AlarmDescription: ECS Cluster Memory Too Low Scaling Alarm
      Period: '300'
      Dimensions:
      - Value: {{clusterName}}
        Name: ClusterName
      EvaluationPeriods: '1'
      Namespace: AWS/ECS
      Threshold: '25'
  EcsCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: {{clusterName}}
  EcsService:
    Type: AWS::ECS::Service
    DependsOn:
    {{#if routingInfo}}
    - AlbListener
    {{/if}}
    - EcsCluster
    Properties:
      Cluster:
        Ref: EcsCluster
      DesiredCount: {{desiredCount}}
      DeploymentConfiguration:
        MinimumHealthyPercent: {{minimumHealthyPercentDeployment}}
      {{#if routingInfo}}
      LoadBalancers:
      - ContainerName: {{containerName}}
        ContainerPort: {{containerPort}}
        TargetGroupArn:
          Ref: AlbTargetGroup
      Role: {{ecsServiceRoleArn}}
      {{/if}}
      TaskDefinition:
        Ref: TaskDefinition
  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: {{clusterName}}
      TaskRoleArn: !GetAtt TaskRole.Arn
      NetworkMode: bridge
      {{#if volumes}}
      Volumes:
      {{#each volumes}} 
      - Name: {{name}}
        Host:
          SourcePath: {{sourcePath}}
      {{/each}}
      {{/if}}
      ContainerDefinitions:
      - Name: {{clusterName}}
        Image: {{dockerImage}}
        Memory: {{maxMb}}
        Cpu: {{cpuUnits}}
        Essential: true
        Privileged: false
        DisableNetworking: false
        {{#if portMappings}}
        PortMappings:
        {{#each portMappings}}
        - ContainerPort: {{this}}
          Protocol: tcp
        {{/each}}
        {{/if}}
        Environment:
        - Name: HANDEL_DEPLOY_VERSION # This is required to force-update the thing
          Value: {{deployVersion}}
        {{#if environmentVariables}}
        {{#each environmentVariables}}
        - Name: {{@key}}
          Value: {{this}}
        {{/each}}
        {{/if}}
        {{#if mountPoints}}
        MountPoints:
        {{#each mountPoints}}
        - SourceVolume: {{sourceVolume}}
          ContainerPath: {{containerPath}}
        {{/each}}
        {{/if}}
  {{#if routingInfo}}
  Alb:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    DependsOn: AlbSecurityGroup
    Properties:
      Name: {{clusterName}}
      Scheme: internet-facing
      LoadBalancerAttributes:
      - Key: idle_timeout.timeout_seconds
        Value: {{routingInfo.timeout}}
      Subnets:
      {{#each publicSubnetIds}}
      - {{this}}
      {{/each}}
      SecurityGroups:
      - Ref: AlbSecurityGroup
      Tags:
      {{#if tags}}
      {{#each tags}}
      - Key: {{@key}}
        Value: {{this}}
      {{/each}}
      {{/if}}
      - Key: Name
        Value: {{clusterName}}-alb
  AlbSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for ALB
      VpcId: {{vpcId}}
      SecurityGroupIngress:
      - IpProtocol: tcp
        {{#if routingInfo.httpsCertificate}}
        FromPort: '443'
        ToPort: '443'
        {{else}}
        FromPort: '80'
        ToPort: '80'
        {{/if}}
        CidrIp: 0.0.0.0/0
      Tags:
      {{#if tags}}
      {{#each tags}}
      - Key: {{@key}}
        Value: {{this}}
      {{/each}}
      {{/if}}
      - Key: Name
        Value: {{clusterName}}-alb
  EcsIngressFromAlb:
    Type: AWS::EC2::SecurityGroupIngress
    DependsOn: AlbSecurityGroup
    Properties:
      GroupId: {{ecsSecurityGroupId}}
      IpProtocol: tcp
      FromPort: '0'
      ToPort: '65535'
      SourceSecurityGroupId:
        Ref: AlbSecurityGroup
  AlbListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    DependsOn:
    - AlbTargetGroup
    - Alb
    Properties:
      DefaultActions:
      - Type: forward
        TargetGroupArn:
          Ref: AlbTargetGroup
      LoadBalancerArn:
        Ref: Alb
      {{#if routingInfo.httpsCertificate}}
      Port: '443'
      Protocol: HTTPS
      Certificates:
      - CertificateArn: {{routingInfo.httpsCertificate}}
      {{else}}
      Port: '80'
      Protocol: HTTP
      {{/if}}
  AlbListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    DependsOn:
    - AlbListener
    - AlbTargetGroup
    Properties:
      Actions:
      - Type: forward
        TargetGroupArn:
          Ref: AlbTargetGroup
      Conditions:
      - Field: path-pattern
        Values:
        - "/"
      ListenerArn:
        Ref: AlbListener
      Priority: 1
  AlbTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: {{routingInfo.healthCheckPath}}
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      Name: {{clusterName}}
      Port: 80
      Protocol: HTTP
      Tags:
      {{#if tags}}
      {{#each tags}}
      - Key: {{@key}}
        Value: {{this}}
      {{/each}}
      {{/if}}
      - Key: Name
        Value: {{clusterName}}-alb
      UnhealthyThresholdCount: 2
      VpcId: {{vpcId}}
  {{/if}}
Outputs:
  EcsClusterId:
    Description: The EcsClusterId
    Value:
      Ref: EcsCluster
