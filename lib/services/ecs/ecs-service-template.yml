---
AWSTemplateFormatVersion: '2010-09-09'
Description: Handel-created ECS Cluster
Parameters:
  ClusterName:
    Description: Name of the cluster to be created
    Type: String
  MinInstances:
    Description: Minimum number of instances in the cluster
    Type: Number
    Default: 1
  MaxInstances:
    Description: Maximum number of instances in the cluster
    Type: Number
    Default: 1
  InstanceType:
    Description: The type of ec2 instances to use in the cluster
    Type: String
    AllowedValues:
    - t2.nano
    - t2.micro
    - t2.small
    - t2.medium
    - t2.large
    - m4.large
    - m4.xlarge
    - m4.2xlarge
    - m3.medium
    - m3.large
    - m3.xlarge
    - m3.2xlarge
    ConstraintDescription: Must be a valid EC2 instance type
    Default: t2.micro
  EcsSecurityGroup:
    Description: Security Group for the ECS cluster
    Type: String
  AmiImageId:
    Description: The Amazon ECS optimized AMI image id
    Type: String
  UserData:
    Description: Base-64 encoded bash script to execute on startup as part of the
      instance config
    Type: String
  AsgSubnetIds:
    Description: The list of subnet ids to deploy the cluster in
    Type: CommaDelimitedList
  AsgCooldown:
    Description: The cooldown time in seconds for the auto-scale group
    Type: Number
    Default: '300'
  DesiredCount:
    Description: The desired count of running tasks
    Type: Number
  MinimumHealthyPercentDeployment:
    Description: The minimum percent of tasks to keep running during a deployment
    Type: Number
    Default: 50
  AlbSubnets:
    Description: The list of subnet ids to deploy the cluster in
    Type: CommaDelimitedList
  ContainerName:
    Description: The name of the container from the task definition
    Type: String
  ContainerPort:
    Description: The port of your application in the container
    Type: Number
  DockerImage:
    Description: The Docker image to be deployed (including tag)
    Type: String
  VpcId:
    Description: The ID of the VPC in which you are running
    Type: String
  EcsServiceRole:
    Description: The ARN of the role the ECS service (not the task) will assume
    Type: String
  TaskRole:
    Description: The ARN of the task role for the ECS tasks in your service
    Type: String
  MaxMb:
    Description: The max amount of memory to allocate for the task
    Type: Number
  CpuUnits:
    Description: The amount of CPU units to allocate for the task
    Type: Number
  DeployVersion:
    Description: The Handel deploy version
    Type: String
Resources:
  EcsIamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
          Action:
          - sts:AssumeRole
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role
  EcsInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
      - Ref: EcsIamRole
  EcsLaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      AssociatePublicIpAddress: false
      BlockDeviceMappings:
      - DeviceName: "/dev/xvda"
        Ebs:
          VolumeSize: 8
          VolumeType: gp2
          DeleteOnTermination: true
      - DeviceName: "/dev/xvdcz"
        Ebs:
          VolumeSize: 22
          VolumeType: gp2
          DeleteOnTermination: true
      IamInstanceProfile:
        Ref: EcsInstanceProfile
      ImageId:
        Ref: AmiImageId
      InstanceMonitoring: false
      InstanceType:
        Ref: InstanceType
      SecurityGroups:
      - Ref: EcsSecurityGroup
      UserData:
        Ref: UserData
      {{#if sshKeyName}}
      KeyName: {{sshKeyName}}
      {{/if}}
  EcsAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      Cooldown:
        Ref: AsgCooldown
      DesiredCapacity:
        Ref: MinInstances
      HealthCheckGracePeriod: 300
      HealthCheckType: EC2
      LaunchConfigurationName:
        Ref: EcsLaunchConfiguration
      MaxSize:
        Ref: MaxInstances
      MinSize:
        Ref: MinInstances
      Tags:
      - Key: Name
        Value: !Ref ClusterName
        PropagateAtLaunch: true
      VPCZoneIdentifier:
        Ref: AsgSubnetIds
  EcsAutoScalingPolicyUp:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName:
        Ref: EcsAutoScalingGroup
      ScalingAdjustment: 1
  EcsClusterMemoryHighAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmActions:
      - Ref: EcsAutoScalingPolicyUp
      MetricName: MemoryReservation
      ComparisonOperator: GreaterThanThreshold
      Statistic: Average
      AlarmDescription: ECS Cluster Memory Too High Scaling Alarm
      Period: '300'
      Dimensions:
      - Value:
          Ref: ClusterName
        Name: ClusterName
      EvaluationPeriods: '1'
      Namespace: AWS/ECS
      Threshold: '50'
  EcsAutoScalingPolicyDown:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName:
        Ref: EcsAutoScalingGroup
      ScalingAdjustment: -1
  EcsClusterMemoryLowAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmActions:
      - Ref: EcsAutoScalingPolicyDown
      MetricName: MemoryReservation
      ComparisonOperator: LessThanThreshold
      Statistic: Average
      AlarmDescription: ECS Cluster Memory Too Low Scaling Alarm
      Period: '300'
      Dimensions:
      - Value:
          Ref: ClusterName
        Name: ClusterName
      EvaluationPeriods: '1'
      Namespace: AWS/ECS
      Threshold: '25'
  EcsCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName:
        Ref: ClusterName
  EcsService:
    Type: AWS::ECS::Service
    DependsOn:
    {{#if routingInfo}}
    - AlbListener
    {{/if}}
    - EcsCluster
    Properties:
      Cluster:
        Ref: EcsCluster
      DesiredCount:
        Ref: DesiredCount
      DeploymentConfiguration:
        MinimumHealthyPercent:
          Ref: MinimumHealthyPercentDeployment
      {{#if routingInfo}}
      LoadBalancers:
      - ContainerName:
          Ref: ContainerName
        ContainerPort:
          Ref: ContainerPort
        TargetGroupArn:
          Ref: AlbTargetGroup
      Role: !Ref EcsServiceRole
      {{/if}}
      TaskDefinition:
        Ref: TaskDefinition
  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family:
        Ref: ClusterName
      TaskRoleArn:
        Ref: TaskRole
      NetworkMode: bridge
      {{#if volumes}}
      Volumes:
      {{#each volumes}} 
      - Name: {{name}}
        Host:
          SourcePath: {{sourcePath}}
      {{/each}}
      {{/if}}
      ContainerDefinitions:
      - Name:
          Ref: ClusterName
        Image:
          Ref: DockerImage
        Memory:
          Ref: MaxMb
        Cpu:
          Ref: CpuUnits
        Essential: true
        Privileged: false
        DisableNetworking: false
        {{#if portMappings}}
        PortMappings:
        {{#each portMappings}}
        - ContainerPort: {{this}}
          Protocol: tcp
        {{/each}}
        {{/if}}
        Environment:
        - Name: HANDEL_DEPLOY_VERSION # This is required to force-update the thing
          Value: 
            Ref: DeployVersion
        {{#if environmentVariables}}
        {{#each environmentVariables}}
        - Name: {{@key}}
          Value: {{this}}
        {{/each}}
        {{/if}}
        {{#if mountPoints}}
        MountPoints:
        {{#each mountPoints}}
        - SourceVolume: {{sourceVolume}}
          ContainerPath: {{containerPath}}
        {{/each}}
        {{/if}}
  {{#if routingInfo}}
  Alb:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    DependsOn: AlbSecurityGroup
    Properties:
      Name:
        Ref: ClusterName
      Scheme: internet-facing
      LoadBalancerAttributes:
      - Key: idle_timeout.timeout_seconds
        Value: {{routingInfo.timeout}}
      Subnets:
        Ref: AlbSubnets
      SecurityGroups:
      - Ref: AlbSecurityGroup
  AlbSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for ALB
      VpcId:
        Ref: VpcId
      SecurityGroupIngress:
      - IpProtocol: tcp
        {{#if routingInfo.httpsCertificate}}
        FromPort: '443'
        ToPort: '443'
        {{else}}
        FromPort: '80'
        ToPort: '80'
        {{/if}}
        CidrIp: 0.0.0.0/0
  EcsIngressFromAlb:
    Type: AWS::EC2::SecurityGroupIngress
    DependsOn: AlbSecurityGroup
    Properties:
      GroupId:
        Ref: EcsSecurityGroup
      IpProtocol: tcp
      FromPort: '0'
      ToPort: '65535'
      SourceSecurityGroupId:
        Ref: AlbSecurityGroup
  AlbListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    DependsOn:
    - AlbTargetGroup
    - Alb
    Properties:
      DefaultActions:
      - Type: forward
        TargetGroupArn:
          Ref: AlbTargetGroup
      LoadBalancerArn:
        Ref: Alb
      {{#if routingInfo.httpsCertificate}}
      Port: '443'
      Protocol: HTTPS
      Certificates:
      - CertificateArn: {{routingInfo.httpsCertificate}}
      {{else}}
      Port: '80'
      Protocol: HTTP
      {{/if}}
  AlbListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    DependsOn:
    - AlbListener
    - AlbTargetGroup
    Properties:
      Actions:
      - Type: forward
        TargetGroupArn:
          Ref: AlbTargetGroup
      Conditions:
      - Field: path-pattern
        Values:
        - "/"
      ListenerArn:
        Ref: AlbListener
      Priority: 1
  AlbTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: {{routingInfo.healthCheckPath}}
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      Name:
        Ref: ClusterName
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 2
      VpcId:
        Ref: VpcId
  {{/if}}
Outputs:
  EcsClusterId:
    Description: The EcsClusterId
    Value:
      Ref: EcsCluster
